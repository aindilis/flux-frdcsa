./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
./run.sh: 1: ./run.sh: sicstus: not found
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/sandbox/prolog-planning-library-20140313/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Action (h for help) ? Action (h for help) ? Unknown option (h for help)
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_maxb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:13:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
Action (h for help) ? ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_addb.pl:3:
	source_sink `library(sets)' does not exist
Action (h for help) ? ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: check_mutex/1: Undefined procedure: pairfrom/4
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/backward.pl:12:
	source_sink `library(sets)' does not exist
Action (h for help) ? ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	source_sink `library(sets)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/agent-attempts/7/systems/prolog-planning-library-20140313/h_add.pl:3:
	Goal (directive) failed: user:load_files(library(sets),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: Prolog initialisation failed:
ERROR: Out of global stack
ERROR: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
ERROR: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	source_sink `library(queues)' does not exist
Warning: /var/lib/myfrdcsa/codebases/minor/prolog-agent/systems/agent-attempts/7/systems/prolog-planning-library-20140313/bfs.pl:20:
	Goal (directive) failed: user:load_files(library(queues),[if(changed)])
ERROR: Prolog initialisation failed:
ERROR: search/3: Undefined procedure: list_queue/2
Action (h for help) ? 
Action (h for help) ? EOF: exit
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? exit
Action (h for help) ? Action (h for help) ? 
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? 
Action (h for help) ? exit
Warning: Package inotify: no binary for architecture x86_64-linux
Warning: Package plOpenGL: no binary for architecture x86_64-linux
Warning: Package inotify: no binary for architecture x86_64-linux
Warning: Package plOpenGL: no binary for architecture x86_64-linux
Warning: Package inotify: no binary for architecture x86_64-linux
Warning: Package plOpenGL: no binary for architecture x86_64-linux
Warning: Package inotify: no binary for architecture x86_64-linux
Warning: Package plOpenGL: no binary for architecture x86_64-linux
Warning: Package inotify: no binary for architecture x86_64-linux
Warning: Package plOpenGL: no binary for architecture x86_64-linux
Action (h for help) ? 
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? Unknown option (h for help)
Action (h for help) ? Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

ERROR: readFile.pl:1:
  procedure clauses are not consecutive: read_file / 2
ERROR: readFile.pl:27:
  procedure clauses are not consecutive: read_rest / 2
ERROR: readFile.pl:50:
  procedure clauses are not consecutive: read_word / 3
ERROR: readFile.pl:59:
  procedure clauses are not consecutive: lower_case / 2
ERROR: Stream :63:
  procedure clauses are not consecutive: read_comment / 2
ERROR: readFile.pl:1:
  procedure clauses are not consecutive: read_file / 2
ERROR: readFile.pl:27:
  procedure clauses are not consecutive: read_rest / 2
ERROR: readFile.pl:50:
  procedure clauses are not consecutive: read_word / 3
ERROR: readFile.pl:59:
  procedure clauses are not consecutive: lower_case / 2
ERROR: Stream :63:
  procedure clauses are not consecutive: read_comment / 2
ERROR: Stream :104:
  procedure clauses are not consecutive: parseDomain / 2
ERROR: parseDomain.pl:31:
  procedure clauses are not consecutive: parseDomain / 3
ERROR: readFile.pl:1:
  procedure clauses are not consecutive: read_file / 2
ERROR: readFile.pl:27:
  procedure clauses are not consecutive: read_rest / 2
ERROR: readFile.pl:50:
  procedure clauses are not consecutive: read_word / 3
ERROR: readFile.pl:59:
  procedure clauses are not consecutive: lower_case / 2
ERROR: Stream :63:
  procedure clauses are not consecutive: read_comment / 2
ERROR: parseDomain.pl:42:
  procedure clauses are not consecutive: domainBNF / 3
ERROR: parseDomain.pl:57:
  procedure clauses are not consecutive: require_def / 3
ERROR: parseDomain.pl:59:
  procedure clauses are not consecutive: require_key / 3
ERROR: parseDomain.pl:77:
  procedure clauses are not consecutive: types_def / 3
ERROR: parseDomain.pl:79:
  procedure clauses are not consecutive: constants_def / 3
ERROR: parseDomain.pl:80:
  procedure clauses are not consecutive: predicates_def / 3
ERROR: parseDomain.pl:81:
  procedure clauses are not consecutive: atomic_formula_skeleton / 3
ERROR: parseDomain.pl:84:
  procedure clauses are not consecutive: predicate / 3
ERROR: parseDomain.pl:85:
  procedure clauses are not consecutive: variable / 3
ERROR: parseDomain.pl:87:
  procedure clauses are not consecutive: atomic_function_skeleton / 3
ERROR: parseDomain.pl:89:
  procedure clauses are not consecutive: function_symbol / 3
ERROR: parseDomain.pl:90:
  procedure clauses are not consecutive: functions_def / 3
ERROR: parseDomain.pl:91:
  procedure clauses are not consecutive: structure_def / 3
ERROR: parseDomain.pl:93:
  procedure clauses are not consecutive: typed_list / 4
ERROR: parseDomain.pl:98:
  procedure clauses are not consecutive: primitive_type / 3
ERROR: parseDomain.pl:100:
  procedure clauses are not consecutive: type / 3
ERROR: parseDomain.pl:102:
  procedure clauses are not consecutive: function_typed_list / 4
ERROR: parseDomain.pl:105:
  procedure clauses are not consecutive: function_type / 3
ERROR: parseDomain.pl:107:
  procedure clauses are not consecutive: emptyOr / 3
ERROR: parseDomain.pl:109:
  procedure clauses are not consecutive: action_def / 3
ERROR: parseDomain.pl:116:
  procedure clauses are not consecutive: action_symbol / 3
ERROR: parseDomain.pl:117:
  procedure clauses are not consecutive: action_def_body / 6
ERROR: parseDomain.pl:120:
  procedure clauses are not consecutive: pre_GD / 3
ERROR: parseDomain.pl:123:
  procedure clauses are not consecutive: pref_GD / 3
ERROR: parseDomain.pl:126:
  procedure clauses are not consecutive: pref_name / 3
ERROR: parseDomain.pl:127:
  procedure clauses are not consecutive: gd / 3
ERROR: parseDomain.pl:136:
  procedure clauses are not consecutive: f_comp / 3
ERROR: parseDomain.pl:137:
  procedure clauses are not consecutive: literal / 4
ERROR: parseDomain.pl:139:
  procedure clauses are not consecutive: atomic_formula / 4
ERROR: parseDomain.pl:140:
  procedure clauses are not consecutive: term / 3
ERROR: parseDomain.pl:144:
  procedure clauses are not consecutive: f_exp / 3
ERROR: parseDomain.pl:148:
  procedure clauses are not consecutive: f_head / 3
ERROR: parseDomain.pl:150:
  procedure clauses are not consecutive: binary_op / 3
ERROR: parseDomain.pl:153:
  procedure clauses are not consecutive: multi_op / 3
ERROR: parseDomain.pl:155:
  procedure clauses are not consecutive: binary_comp / 3
ERROR: parseDomain.pl:160:
  procedure clauses are not consecutive: number / 3
ERROR: parseDomain.pl:162:
  procedure clauses are not consecutive: effect / 5
ERROR: parseDomain.pl:164:
  procedure clauses are not consecutive: c_effect / 5
ERROR: parseDomain.pl:167:
  procedure clauses are not consecutive: p_effect / 5
ERROR: parseDomain.pl:172:
  procedure clauses are not consecutive: assign_op / 3
ERROR: parseDomain.pl:180:
  procedure clauses are not consecutive: oneOrMore / 4
ERROR: parseDomain.pl:188:
  procedure clauses are not consecutive: zeroOrMore / 4
ERROR: Stream :191:
  procedure clauses are not consecutive: name / 3
calling an undefined procedure expects_dialect(sicstus) in module eclipse
ERROR: Stream :201:
  Query exited (abort): :- expects_dialect(sicstus)
library not found in use_module(library(ordsets))
library not found in use_module(library(ordsets))
Error(s) occurred while compiling /var/lib/myfrdcsas/versions/myfrdcsa-1.0/codebases/cats/game-engines/prolog-game-engine/attempts/5/flux/prolog-planning-library/forward-a-star-h_0.pl
abort
Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

Usage:
    -b <file>       compile or load a file on startup (deprecated, same as -f)
    -f <file>       compile or load a file on startup (.ecl or .eco)
    -e <goal>       goal to execute (in Prolog syntax)
    -g <kbytes>     global+trail stack size
    -l <kbytes>     local+control stack size
    -L <language>   default language dialect
    -h <kbytes>     private heap size
    -s <kbytes>     shared heap size
    -t <module>     name of initial toplevel module
    -d <seconds>    delayed startup
    -D <dir>        installation directory
    --              end of ECLiPSe options
Parallel system only:
    -w <num>        number of parallel workers
    -wmi            popup worker manager interface
    -wv             verbose worker startup
    -wx <exec>      use specified worker executable
Reserved:
    -a <><><><>
    -c <>
    -m <>
    -o 
    -r <>

